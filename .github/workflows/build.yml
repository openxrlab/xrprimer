# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: build

on:
  push:
    branches:
     - main
    paths-ignore:
      - 'README.md'
      - 'README_CN.md'
      - 'docs/**'

  pull_request:
    paths-ignore:
      - 'README.md'
      - 'README_CN.md'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_cpp:
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash -l {0}
    container:
      image: openxrlab/xrprimer_runtime:ubuntu1804_x64_gcc7_py38_torch181_mmcv150
      credentials:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PWD}}
    steps:
      - uses: actions/checkout@v2
      - name: Show conda env
        run: |
          source /root/miniconda3/etc/profile.d/conda.sh && conda deactivate
          conda info -e
          conda activate openxrlab
          conda list | grep -e torch -e mmcv
      - name: Build and install
        run: |
          rm -rf xrprimer.egg-info
          source /root/miniconda3/etc/profile.d/conda.sh && conda activate openxrlab
          cmake -S. -Bbuild -DBUILD_EXTERNAL=ON -DENABLE_TEST=ON
          cmake --build build -j4 --target install
      - name: Prepare test data
        run: |
          cd build
          wget -q https://openxrlab-share.oss-cn-hongkong.aliyuncs.com/xrprimer/xrprimer.tar.gz
          tar -xzf xrprimer.tar.gz && rm xrprimer.tar.gz
          ln -sfn xrprimer/test test
      - name: Run unittests and generate coverage report
        run: |
          source /root/miniconda3/etc/profile.d/conda.sh && conda activate openxrlab
          echo ${PWD}
          cd build
          ./bin/test_calibrator
          ./bin/test_image
          ./bin/test_version
          # ./bin/test_pose
          # ./bin/test_camera
          PYTHONPATH=./cpp/pybind python ../cpp/tests/test_multi_camera_calibrator.py
          PYTHONPATH=./cpp/pybind python ../cpp/tests/test_pnpsolver.py
          # pip install gcovr
          # mkdir coverage_html
          # coverage_filter="--filter ${CI_PROJECT_DIR}/cpp"
          # gcovr ${coverage_filter} -r . --object-directory=${CI_PROJECT_DIR}/build


  build_py38:
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash -l {0}
    container:
      image: openxrlab/xrprimer_runtime:ubuntu1804_x64_gcc7_py38_torch181_mmcv150
      credentials:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PWD}}
    steps:
      - uses: actions/checkout@v2
      - name: Show conda env
        run: |
          source /root/miniconda3/etc/profile.d/conda.sh && conda deactivate
          conda info -e
          conda activate openxrlab
          conda list | grep torch
          conda list | grep mmcv
      - name: Build and install
        run: |
          rm -rf xrprimer.egg-info
          source /root/miniconda3/etc/profile.d/conda.sh && conda activate openxrlab
          pip install -e .
      - name: Prepare test data
        run: |
          cd python/test
          wget -q https://openxrlab-share.oss-cn-hongkong.aliyuncs.com/xrprimer/xrprimer.tar.gz
          tar -xzf xrprimer.tar.gz && rm xrprimer.tar.gz
          mv xrprimer/test/data ./
          rm -rf xrprimer && cd ..
      - name: Run unittests and generate coverage report
        run: |
          source /root/miniconda3/etc/profile.d/conda.sh && conda activate openxrlab
          coverage run --source xrprimer -m pytest test/
          coverage xml
          coverage report -m
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
